AboutView._vue
<template>
  <div class="about">
    <h1>console.log("やあ")</h1>
  </div>
</template>

HomeView.copy._vue
<template>
  <div class="home">
    <img alt="Vue logo" src="../assets/logo.png">
    <HelloWorld msg="Welcome to Your Vue.js + TypeScript App"/>
  </div>
</template>

<script lang="ts">
import { defineComponent } from 'vue';
import HelloWorld from '@/components/HelloWorld.vue'; // @ is an alias to /src

// ここからナビゲーションウィンドウのやつ

<nav>
    <router-link to="/">Home</router-link> |
    <router-link to="/about">About</router-link> |
    <router-link to="/streamingview">配信</router-link> |
</nav>

export default defineComponent({
  name: 'HomeView',
  components: {
    HelloWorld,
  },
});
</script>

index._vue
<template>
  <logInheader></logInheader>
  <main id="top-page">
  <VideoComponent></VideoComponent> 
  <SiteLimit></SiteLimit>
  <SignUp></SignUp>
    <section id="section1">
      <div class="koukoku">
        <a href="#" class ="linkURL"><img src="../assets/広告.jpg"></a>
      </div>
      <article class="itiran">
        <ul class="random">
          <LiveList></LiveList>
          <LiveList></LiveList>
          <LiveList></LiveList>
          <LiveList></LiveList>
        </ul>
      </article>
    </section>
  </main>
</template>

<script lang="ts">
import { defineComponent } from 'vue';
import VideoComponent from '@/components/VideoComponent.vue';
import LiveList from  '@/components/LiveList.vue';
import SiteLimit from  '@/components/SiteLimit.vue';
import SignUp from  '@/components/SignUp.vue';

export default defineComponent({
  name: 'LiveStreaming',
  components: {
    VideoComponent,
    LiveList,
    SiteLimit,
    SignUp
  },
  data: function(){
    return{
      signup:true,
    }
  },
  methods: {
  },
});
</script>

<style scoped lang="scss">

#section1{
 font-family: 'Kosugi Maru', sans-serif;
 display: flex;
 margin-top: 3.5vw;
 background-color: #f9fcff;
}
  
 .koukoku{
 margin: 2vw 0 0 5vw;
}
  
 .koukoku img{
 border: 0.1vw solid;
 width: 17vw;
}

.itiran{
 width: 80%;
 margin-left: auto;
}

.random{
 display: flex;
 flex-wrap: wrap;
 list-style: none;
 text-align: left;
 justify-content: center;
 margin-right: 3vw;
}

.linkURL{
 text-decoration: none;
 color: #383635;
}
  
</style>

MessagingFunction.copy._vue
<template>
  <div class="commentview">
      <!--コメント、おたより一覧と内容は別componentsにする-->
      <ul class="tab-panel">
      <li class="Tab-A" @click="isSelect('1')" v-bind:class="{'active': isActive === '1'}"><div class="tab-A">コメント</div></li>
      <li class="Tab-B" @click="isSelect('2')" v-bind:class="{'active': isActive === '2'}"><div class="tab-B">おたより</div></li>
    </ul>
    <template v-if="isActive === '1'">
      <div id="tabpage1">
        <ul class="comment">
          <li class="listener"><p class="lisname"></p><p class="listenerkom"></p></li>
        </ul>
      </div>
    </template>
    <template v-else-if="isActive === '2'">
      <div id="tabpage2">
        <ul class="otayori">
          <li class="mail">
            <a href="#mailopen0" class ="honbun"><p class="mainame">ユーザー名ユーザー名</p>
              <div class="mailarea">
                <p class="listenermai">複数行の時はline-clampプロパティを使用します。ここに入れる数値が表示される行を表しています。（3行で隠したい場合は「3」）</p>
              </div>
            </a>
          </li>
        </ul>
      </div>
      <!--
      <div id="mailopen0">
        <div class="open">
          <p class="otaname">おたよりネーム：ユーザー名ユーザー名</p>
          <p class="maildetail">複数行の時はline-clampプロパティを使用します。ここに入れる数値が表示される行を表しています。（3行で隠したい場合は「3」）</p>
        </div>
      </div>
      -->
      <!--<div class ="reportsuccess">
        <div class ="sucmsg">通報完了しました</div>
      </div>-->
    </template>
    <div class="CommentAddfld">
      <button v-on:click="addComment">送信</button>
      <input class="CommentText" type="text" v-model="WriteComment">
    </div>
  </div>
  <!--配信コード入れたらまずここ（レイアウト崩れるので）
  <div class="commentsubmit">
    <input type="submit" class="ssubmit" id="Submit" value="送信">
    <input type="text" class="ccmon" name="username" id="Comment" autocomplete="off">
  </div>
  -->
  <!--
  </div>
  <div class="reportfld">
  <div class="nondisp"><p class="nondispnaka">非表示</p></div><div class="userblock"><p class="userblknaka">ブロック</p></div><div class="userreport"><p class="userrptnaka">通報</p></div>
  </div>
  -->
  <!--
  <div class="kiritimer">
    <div class="kirista">開始00:00</div>
    <div class="kiriend">終了01:15</div>
  </div>
  -->
</template>

<script lang="ts">
import { defineComponent} from 'vue';
import AgoraRTM from 'agora-rtm-sdk';
import AgoraRTC, { IAgoraRTCClient } from "agora-rtc-sdk-ng";
import { reactive } from 'vue';
import { RtmTokenBuilder } from 'agora-token';

let rtm:any = reactive({
  channel:null,
  client: null,
  Account:null,
  expirationTimeInSeconds : 60 * 60,// トークンの有効期間
  currentTimestamp : Math.floor(Date.now() / 1000)
});

let RTMC = reactive({
  CapId: "e85ce293e5c04229b9b098b9dfa9db55",
  CapChannel: "demochannel",
  appCertificate: "390d335e653141b48e2cbba11d5ae48a",
  channel: "demochannel",
  uid: Math.random().toString(32).substring(2)
});

let token = RtmTokenBuilder.buildToken(RTMC.CapId, RTMC.appCertificate, RTMC.uid, rtm.expirationTimeInSeconds);


export default defineComponent({
  name: 'MessagingFunction',
  components : {
  },
  
  data: function() {
    return {
      isActive : '1',
      channelMessage:""
    }
  },

  methods: {
    isSelect: function (num:any) {
      this.isActive = num;
    },

    addComment : function(WriteComment:any){
      rtm.client = AgoraRTM.createInstance(RTMC.CapId);
      rtm.channel = rtm.client.createChannel(RTMC.CapChannel); 
      console.log(token);
      console.log(RTMC.uid);
      
      // createAgoraAccount();
      // function createAgoraAccount(){
      //     RTMC.uid = Math.random().toString(32).substring(2);
      //     //uid = agoraRTMaccountName;
      //     console.log('your account name is' + '【' + RTMC.uid + '】');
      // }


      function loginAgoraRTM(){
        rtm.client.login({uid:RTMC.uid}).then(() => {
            console.log('AgoraRTM client login success');
        }).catch((err:any) => {
            console.log('AgoraRTM client login failure', err);
        });
      }
      loginAgoraRTM();

      rtm.client.on("ConnectionStateChanged", function (newState:string, reason:string) {
          console.log("on connection state changed to " + newState + " reason:" + reason);
      });

        console.log("yaa");
        // rtm.channel.sendMessage({text:'test channel message'}).then(() => {
        //     console.log("agoraRTMaccountName" + " success to sending Msg");
        // }).catch(error => {
        //     console.log("agoraRTMaccountName" + " failed to sending Msg" + error);
        //     alert("メッセージ送れず");
        // });
    },

    CommentSt: () => {

      rtm.channel.on('ConnectionStateChange', (newState:string, reason:string) => {
        console.log('on connection state changed to ' + newState + ' reason: ' + reason);
      });

      function loginAgoraRTC(){
        rtm.client.login({uid: RTMC.uid}).then(() => {
              console.log('AgoraRTM client login success');
              channelJoinAgoraRTC();
          }).catch((err:any) => {
              console.log('AgoraRTM client login failure', err);
          });
      }
      loginAgoraRTC();

      function channelJoinAgoraRTC(){
          rtm.channel.join().then(() => {
              console.log('AgoraRTM channel join success');
              getChannelMessages();
          }).catch((err:any) => {
              console.log('AgoraRTM channel join failure', err);
          });
      }
      

      let comment = document.querySelector('.comment')!;
      let Listener = comment.getElementsByTagName('li');
      let i = Listener.length;  
      let ttext = Listener[i].querySelector('.listenerkom')!;
      let channelMessage = ttext.textContent;

      function getChannelMessages(){
          rtm.channel.on('ChannelMessage', function(message:any, memberId:string){
            console.log(" got message: " + message.text + " from " + memberId);
              //     remoteMessage = message.text; この辺は考える。とりあえずメッセージ反映はさせる
              //     if(remoteMessage == "startGame()" && gameStatus == false){
              //         startGame();
              //     }else if(remoteMessage == "1" || remoteMessage == "2" || remoteMessage == "3"){
              //         remoteMessage = Number(remoteMessage);
              //         console.log("typeof remoteMessage is " + typeof remoteMessage);
              //         console.log("remoteMessage is " + remoteMessage);
              //         getRoles(remoteMessage, memberId);
              //     }
              // });
        });
      }

      // function exitAgoraRTM(){
      //   rtm.client.logout();
      //   rtm.channel.leave();
      //   console.log('channel left and log out');
      // }
    }
          // window.onunload; ()=> {
          //     exitAgoraRTM();
          // };

          // ログイン→チャンネル参加→Msg送信　Addcomment作る→受信作る→試す
  },
});
</script>

<style scoped lang="scss">

body {
  font-family: 'M PLUS Rounded 1c', sans-serif;
}

template {
  display: block;
}

.commentview{
  width: 32vw;
}

  .tab-panel{
  width: 100%;
  height: 4vw;
  display: flex;
  font-size: 2.1vw;
  justify-content: center;
  }

  .tab-panel li{
  display: flex;
  width: 50%;
  font-size: 1.3vw;
  text-decoration: none;
  border: 0.17vw solid black;
  border-color: black;
  color: #383635;
  z-index: 0;
  background-color: #EEEEEE;
  cursor: pointer;
  }

  .tab-panel li.active{
    background-color: #FFFFFF;
    border-bottom: 0;
  }

  .Tab-A{
    margin-right: -0.1vw;
  }
  .Tab-B{
    margin-left: -0.1vw;
  }

  .tab-A, .tab-B{
    display: flex;
    margin: auto;
  }

  #tabpage1, #tabpage2, #mailopen0{
  position: relative;
  border: 0.17vw solid black;
  border-top: 0;
  z-index: 0;
  height: 39VW;
  overflow: scroll;
  overflow-x: hidden;
  background-color: #FFFFFF;
  }

  #tabpage1.active, #tabpage2.active, #mailopen0{
  display: none;
  }

  /*コメント
  ---------------------------------------*/

.listener{
    display: block;/*通常はblock*/
    text-align: justify;
  }

.comment li{
  padding: 1vw;
  font-size: 1.25vw;
  list-style: none;
  word-break: break-all;
  border-bottom: 0.2vw solid #cccccc;
}

.lisname{
  color: #9a493f;
  margin-bottom: 0.4vw;
}

  .mail{
  height: 5vw;
  font-size: 1vw;
  }

  .honbun{
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  text-decoration: none;
  color: #000;
  border-bottom: 0.2vw solid #cccccc;
  }

  .mainame{
  padding-left: 0.5vw;
  width: 20%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  }

  .mailarea{
  width: 80%;
  height: 80%;
  margin: auto 0;
  border-left: 0.3vw solid; 
  text-align: left;
  display: flex;
  align-items: center;
  }

  .listenermai{
  display: -webkit-box;
  margin:0.5vw;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  word-break: break-all;
  }

.CommentAddfld{
 margin-top: 0.7vw;
 height: 2.5vw;
 width: 100%;
 border: 0.05vw solid;
 display: flex;

}

.CommentText{
 border: 0;
 border-left: 0.1vw solid;
 padding: 0 0 0 0.4vw;
 width: 80%;
 height: 100%;
 font-size: 1vw;

}

.CommentAddfld button{
 padding: 0;
 width: 20%;
 height: 100%;
 font-size: 1vw;
}

</style>

test._vue
mRtmClient = RtmClient.createInstance(getBaseContext(), getString(R.string.agora_app_id), new RtmClientListener(){
    mRtmClient.login(null, login_name + mUid, new ResultCallback<Void>() {
        mRtmChannel = mRtmClient.createChannel(channel, new MyChannelListener());

        mRtmChannel.join(new ResultCallback<Void>() {
            mRtmChannel = mRtmClient.createChannel(channel, new MyChannelListener());
                    mRtmChannel.join(new ResultCallback<Void>() {
                        RtmMessage message = mRtmClient.createMessage();
                        message.setText(”Please unmute”);
                        mRtmChannel.sendMessage(message, new ResultCallback<Void>() {
                            class MyChannelListener implements RtmChannelListener {
                                @Override
                                public void onMessageReceived(final RtmMessage message, final RtmChannelMember fromMember) {

                                String account = fromMember.getUserId();
                                String msg = message.getText();
                                //Please unmute//
                                    if (getString(R.string.msg_unmute).equals(arrMsg[0])) {
                                        //リクエスト文字を画面に表示
                                        txReq =  (TextView) findViewById(R.id.textReq3);
                                        txReq.setText(getString(R.string.msg_unmute));
                                    }

                                    //You can unmute
                                    if (getString(R.string.msg_can_unmute).equals(arrMsg[0])) {
                                        //マイクをON
                                        doVoiceLocalMute(false);
                                   }
   }
}

VideoComponent.copy._vue
<template>
  <div>
    <h2>Agora Video Web SDK Quickstart Vue.js</h2>
    <div>
      <div>
        <button type="button" id="join" v-on:click="join()">JOIN</button>
      </div>
      <div id="local_video"></div>
    </div>
  </div>
</template>

<script lang="ts">
import { defineComponent } from 'vue';
import AgoraRTC, { IAgoraRTCClient } from "agora-rtc-sdk-ng";

export default defineComponent({
  name: 'VideoComponents',

  methods: {
    join: () => {
      // let rtc = this.rtc;
      // let options = this.options;
      let rtc:any = {
        localAudioTrack: null,
        localVideoTrack: null,
        client: null
      };
      let options = {
        appId: "49d72a2fc8dc4917804e9e8bacde2661",
        channel: "test_ui",
        token: "007eJxTYNjXefPZN92nzJb/Z2+bxcjh57Nv6+KrsurSZX+DaxP8fksoMJhYppgbJRqlJVukJJtYGppbGJikWqZaJCUmp6QamZkZrj/Xk9wQyMjAODmDCUiCIYjPzlCSWlwSX5rJwAAAAiAhew==",
        uid: 0
      }
      async function initializeRTC() {
        rtc.client = AgoraRTC.createClient({ mode: "rtc", codec: "vp8" });
        await rtc.client.join(options.appId, options.channel, options.token, options.uid);
        rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();
        rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack();
        rtc.localVideoTrack.play("local_video");
        await rtc.client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);
      }
      initializeRTC();
    }
  },
  mounted: () => {
    // const client: IAgoraRTCClient = AgoraRTC.createClient({ codec: "h264", mode: "live" });
    // console.log("Client:", client);
  },

})
</script>

<style scoped lang="scss">
#local_video {
  width: 320px;
  height: 240px;
}
</style>
